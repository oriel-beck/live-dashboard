services:
  api:
    build:
      context: .
      dockerfile: ./api/Dockerfile
      target: dev
    develop:
      watch:
        - path: ./api/src
          target: /app/src
          action: sync
        - path: ./api/package.json
          target: /app/package.json
          action: sync
    command: ["bun", "run", "dev"]
    depends_on: 
      - redis
      - postgres
    ports:
      - "3000:3000"
    environment:
      - FEATURE_METRICS=true
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "bun", "-e", "fetch('http://localhost:3000/health').then(r => r.ok ? process.exit(0) : process.exit(1)).catch(() => process.exit(1))"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - dev-network
      - monitoring
    volumes:
      - api_logs:/app/logs
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=3000"
      - "prometheus.io/path=/metrics"
    restart: unless-stopped

  bot:
    build:
      context: .
      dockerfile: ./bot/Dockerfile
      target: dev
    develop:
      watch:
        - path: ./bot/src
          target: /app/src
          action: sync
    command: ["bun", "run", "dev"]
    depends_on: 
      - redis
      - api
      - nirn-proxy
    ports:
      - "30000:30000"  # Shard manager metrics API
    environment:
      - METRICS_PORT=30000  # Base port for shard 0
      - USE_SHARDING=${USE_SHARDING:-true}
      - NIRN_HOST=nirn-proxy
      - NIRN_PORT=8081
    env_file:
      - .env
    networks:
      - dev-network
      - monitoring
    volumes:
      - bot_logs:/app/logs
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=30000"
      - "prometheus.io/path=/metrics"
    restart: unless-stopped

  dashboard:
    build:
      context: .
      dockerfile: ./dashboard/Dockerfile
      target: dev
    develop:
      watch:
        - path: ./dashboard/src
          target: /app/src
          action: sync
    command: ["npm", "run", "start", "--", "--host", "0.0.0.0", "--port", "4200"]
    depends_on: 
      - api
    ports:
      - "4200:4200"
    environment:
      - NODE_ENV=development
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - dev-network
      - monitoring
    volumes:
      - ./dashboard/src:/app/src:ro
      - ./dashboard/angular.json:/app/angular.json:ro
      - ./dashboard/tsconfig.json:/app/tsconfig.json:ro
      - ./dashboard/tsconfig.app.json:/app/tsconfig.app.json:ro
      
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - dev-network
      - monitoring
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=6379"

  postgres:
    image: postgres:15-alpine
    env_file:
      - .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d public"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - dev-network
      - monitoring
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=5432"

  # Monitoring Stack Services
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - redis
      - postgres

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - prometheus
      - loki

  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - monitoring

  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    volumes:
      - ./monitoring/promtail/promtail-config.yml:/etc/promtail/config.yml
      - api_logs:/logs/api:ro
      - bot_logs:/logs/bot:ro
      - /var/log:/var/log:ro
    command: -config.file=/etc/promtail/config.yml
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - loki

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - monitoring

  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    ports:
      - "9121:9121"
    environment:
      - REDIS_ADDR=redis://redis:6379
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - redis

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: postgres-exporter
    ports:
      - "9187:9187"
    environment:
      - DATA_SOURCE_NAME=postgresql://postgres:password1234@postgres:5432/public?sslmode=disable
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - postgres

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    privileged: true
    devices:
      - /dev/kmsg
    restart: unless-stopped
    networks:
      - monitoring

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    restart: unless-stopped
    networks:
      - monitoring

  nirn-proxy:
    image: ghcr.io/germanoeich/nirn-proxy:latest
    container_name: nirn-proxy
    ports:
      - "8081:8081"  # Main proxy port
      - "9000:9000"  # Metrics port
    restart: unless-stopped
    networks:
      - dev-network
      - monitoring
    environment:
      - ENABLE_METRICS=true
      - PORT=8081
    volumes:
      - nirn_proxy_data:/app/data
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=9000"
      - "prometheus.io/path=/metrics"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/nirn/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  postgres_data:
  prometheus_data:
  grafana_data:
  loki_data:
  alertmanager_data:
  api_logs:
  bot_logs:
  nirn_proxy_data:

networks:
  dev-network:
    driver: bridge
  monitoring:
    driver: bridge
