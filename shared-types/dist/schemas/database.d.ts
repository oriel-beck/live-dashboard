import { z } from "zod";
export declare const DbDefaultCommandSchema: z.ZodObject<{
    id: z.ZodNumber;
    discordId: z.ZodNullable<z.ZodBigInt>;
    name: z.ZodString;
    description: z.ZodString;
    cooldown: z.ZodNumber;
    permissions: z.ZodBigInt;
    enabled: z.ZodBoolean;
    parentId: z.ZodNullable<z.ZodNumber>;
    categoryId: z.ZodNullable<z.ZodNumber>;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
    subcommands: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodTypeAny>, "many">>;
}, "strip", z.ZodTypeAny, {
    id: number;
    name: string;
    permissions: bigint;
    parentId: number | null;
    description: string;
    createdAt: Date;
    updatedAt: Date;
    enabled: boolean;
    cooldown: number;
    discordId: bigint | null;
    categoryId: number | null;
    subcommands?: any[] | undefined;
}, {
    id: number;
    name: string;
    permissions: bigint;
    parentId: number | null;
    description: string;
    createdAt: Date;
    updatedAt: Date;
    enabled: boolean;
    cooldown: number;
    discordId: bigint | null;
    categoryId: number | null;
    subcommands?: any[] | undefined;
}>;
export declare const DbCommandConfigSchema: z.ZodObject<{
    guildId: z.ZodString;
    commandId: z.ZodNumber;
    enabled: z.ZodBoolean;
    whitelistedRoles: z.ZodArray<z.ZodString, "many">;
    blacklistedRoles: z.ZodArray<z.ZodString, "many">;
    whitelistedChannels: z.ZodArray<z.ZodString, "many">;
    blacklistedChannels: z.ZodArray<z.ZodString, "many">;
    bypassRoles: z.ZodArray<z.ZodString, "many">;
    createdAt: z.ZodDate;
    updatedAt: z.ZodDate;
    defaultCommand: z.ZodOptional<z.ZodObject<{
        id: z.ZodNumber;
        discordId: z.ZodNullable<z.ZodBigInt>;
        name: z.ZodString;
        description: z.ZodString;
        cooldown: z.ZodNumber;
        permissions: z.ZodBigInt;
        enabled: z.ZodBoolean;
        parentId: z.ZodNullable<z.ZodNumber>;
        categoryId: z.ZodNullable<z.ZodNumber>;
        createdAt: z.ZodDate;
        updatedAt: z.ZodDate;
        subcommands: z.ZodOptional<z.ZodArray<z.ZodLazy<z.ZodTypeAny>, "many">>;
    }, "strip", z.ZodTypeAny, {
        id: number;
        name: string;
        permissions: bigint;
        parentId: number | null;
        description: string;
        createdAt: Date;
        updatedAt: Date;
        enabled: boolean;
        cooldown: number;
        discordId: bigint | null;
        categoryId: number | null;
        subcommands?: any[] | undefined;
    }, {
        id: number;
        name: string;
        permissions: bigint;
        parentId: number | null;
        description: string;
        createdAt: Date;
        updatedAt: Date;
        enabled: boolean;
        cooldown: number;
        discordId: bigint | null;
        categoryId: number | null;
        subcommands?: any[] | undefined;
    }>>;
}, "strip", z.ZodTypeAny, {
    whitelistedRoles: string[];
    blacklistedRoles: string[];
    whitelistedChannels: string[];
    blacklistedChannels: string[];
    bypassRoles: string[];
    createdAt: Date;
    updatedAt: Date;
    enabled: boolean;
    guildId: string;
    commandId: number;
    defaultCommand?: {
        id: number;
        name: string;
        permissions: bigint;
        parentId: number | null;
        description: string;
        createdAt: Date;
        updatedAt: Date;
        enabled: boolean;
        cooldown: number;
        discordId: bigint | null;
        categoryId: number | null;
        subcommands?: any[] | undefined;
    } | undefined;
}, {
    whitelistedRoles: string[];
    blacklistedRoles: string[];
    whitelistedChannels: string[];
    blacklistedChannels: string[];
    bypassRoles: string[];
    createdAt: Date;
    updatedAt: Date;
    enabled: boolean;
    guildId: string;
    commandId: number;
    defaultCommand?: {
        id: number;
        name: string;
        permissions: bigint;
        parentId: number | null;
        description: string;
        createdAt: Date;
        updatedAt: Date;
        enabled: boolean;
        cooldown: number;
        discordId: bigint | null;
        categoryId: number | null;
        subcommands?: any[] | undefined;
    } | undefined;
}>;
export declare const CommandConfigResultSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    description: z.ZodString;
    cooldown: z.ZodNumber;
    permissions: z.ZodString;
    enabled: z.ZodBoolean;
    whitelistedRoles: z.ZodArray<z.ZodString, "many">;
    blacklistedRoles: z.ZodArray<z.ZodString, "many">;
    whitelistedChannels: z.ZodArray<z.ZodString, "many">;
    blacklistedChannels: z.ZodArray<z.ZodString, "many">;
    bypassRoles: z.ZodArray<z.ZodString, "many">;
    createdAt: z.ZodNullable<z.ZodDate>;
    updatedAt: z.ZodNullable<z.ZodDate>;
    subcommands: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    parentId: z.ZodOptional<z.ZodNumber>;
    categoryId: z.ZodOptional<z.ZodNumber>;
    discordId: z.ZodOptional<z.ZodBigInt>;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    permissions: string;
    whitelistedRoles: string[];
    blacklistedRoles: string[];
    whitelistedChannels: string[];
    blacklistedChannels: string[];
    bypassRoles: string[];
    description: string;
    createdAt: Date | null;
    updatedAt: Date | null;
    enabled: boolean;
    cooldown: number;
    subcommands: Record<string, unknown>;
    parentId?: number | undefined;
    discordId?: bigint | undefined;
    categoryId?: number | undefined;
}, {
    id: string;
    name: string;
    permissions: string;
    whitelistedRoles: string[];
    blacklistedRoles: string[];
    whitelistedChannels: string[];
    blacklistedChannels: string[];
    bypassRoles: string[];
    description: string;
    createdAt: Date | null;
    updatedAt: Date | null;
    enabled: boolean;
    cooldown: number;
    subcommands: Record<string, unknown>;
    parentId?: number | undefined;
    discordId?: bigint | undefined;
    categoryId?: number | undefined;
}>;
export declare const CommandConfigWithSubcommandResultSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    description: z.ZodString;
    cooldown: z.ZodNumber;
    permissions: z.ZodString;
    enabled: z.ZodBoolean;
    whitelistedRoles: z.ZodArray<z.ZodString, "many">;
    blacklistedRoles: z.ZodArray<z.ZodString, "many">;
    whitelistedChannels: z.ZodArray<z.ZodString, "many">;
    blacklistedChannels: z.ZodArray<z.ZodString, "many">;
    bypassRoles: z.ZodArray<z.ZodString, "many">;
    createdAt: z.ZodNullable<z.ZodDate>;
    updatedAt: z.ZodNullable<z.ZodDate>;
    subcommands: z.ZodRecord<z.ZodString, z.ZodUnknown>;
    parentId: z.ZodOptional<z.ZodNumber>;
    categoryId: z.ZodOptional<z.ZodNumber>;
    discordId: z.ZodOptional<z.ZodBigInt>;
} & {
    subcommand: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
        description: z.ZodString;
        enabled: z.ZodBoolean;
        cooldown: z.ZodNumber;
        whitelistedRoles: z.ZodArray<z.ZodString, "many">;
        blacklistedRoles: z.ZodArray<z.ZodString, "many">;
        whitelistedChannels: z.ZodArray<z.ZodString, "many">;
        blacklistedChannels: z.ZodArray<z.ZodString, "many">;
        bypassRoles: z.ZodArray<z.ZodString, "many">;
    }, "strip", z.ZodTypeAny, {
        id: string;
        name: string;
        whitelistedRoles: string[];
        blacklistedRoles: string[];
        whitelistedChannels: string[];
        blacklistedChannels: string[];
        bypassRoles: string[];
        description: string;
        enabled: boolean;
        cooldown: number;
    }, {
        id: string;
        name: string;
        whitelistedRoles: string[];
        blacklistedRoles: string[];
        whitelistedChannels: string[];
        blacklistedChannels: string[];
        bypassRoles: string[];
        description: string;
        enabled: boolean;
        cooldown: number;
    }>;
}, "strip", z.ZodTypeAny, {
    id: string;
    name: string;
    permissions: string;
    whitelistedRoles: string[];
    blacklistedRoles: string[];
    whitelistedChannels: string[];
    blacklistedChannels: string[];
    bypassRoles: string[];
    description: string;
    createdAt: Date | null;
    updatedAt: Date | null;
    enabled: boolean;
    cooldown: number;
    subcommands: Record<string, unknown>;
    subcommand: {
        id: string;
        name: string;
        whitelistedRoles: string[];
        blacklistedRoles: string[];
        whitelistedChannels: string[];
        blacklistedChannels: string[];
        bypassRoles: string[];
        description: string;
        enabled: boolean;
        cooldown: number;
    };
    parentId?: number | undefined;
    discordId?: bigint | undefined;
    categoryId?: number | undefined;
}, {
    id: string;
    name: string;
    permissions: string;
    whitelistedRoles: string[];
    blacklistedRoles: string[];
    whitelistedChannels: string[];
    blacklistedChannels: string[];
    bypassRoles: string[];
    description: string;
    createdAt: Date | null;
    updatedAt: Date | null;
    enabled: boolean;
    cooldown: number;
    subcommands: Record<string, unknown>;
    subcommand: {
        id: string;
        name: string;
        whitelistedRoles: string[];
        blacklistedRoles: string[];
        whitelistedChannels: string[];
        blacklistedChannels: string[];
        bypassRoles: string[];
        description: string;
        enabled: boolean;
        cooldown: number;
    };
    parentId?: number | undefined;
    discordId?: bigint | undefined;
    categoryId?: number | undefined;
}>;
export type DbDefaultCommand = z.infer<typeof DbDefaultCommandSchema>;
export type DbCommandConfig = z.infer<typeof DbCommandConfigSchema>;
export type CommandConfigResult = z.infer<typeof CommandConfigResultSchema>;
export type CommandConfigWithSubcommandResult = z.infer<typeof CommandConfigWithSubcommandResultSchema>;
//# sourceMappingURL=database.d.ts.map